{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","helpers.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","search","query","handleChange","event","target","value","name","setState","applyFilters","todos","todosToShow","filter","todo","title","toLowerCase","includes","completed","this","props","selectUser","className","type","placeholder","onChange","map","key","id","checked","readOnly","onClick","userId","Component","request","url","options","fetch","then","result","ok","Error","status","statusText","json","getUserById","CurrentUser","user","a","response","data","prevProps","clearSelectedUser","email","phone","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc3f192d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends Component {\n  state = {\n    search: '',\n    query: 'all',\n  }\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  applyFilters = (todos) => {\n    let todosToShow = [...todos];\n    const { search, query } = this.state;\n\n    if (search) {\n      todosToShow = todosToShow.filter(todo => todo.title && todo.title\n        .toLowerCase().includes(search.toLowerCase()));\n    }\n\n    if (query === 'completed') {\n      todosToShow = todosToShow.filter(todo => todo.completed);\n    }\n\n    if (query === 'active') {\n      todosToShow = todosToShow.filter(todo => !todo.completed);\n    }\n\n    return todosToShow;\n  }\n\n  render() {\n    const { selectUser, todos } = this.props;\n    const { search, query } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <form>\n            <input\n              name=\"search\"\n              type=\"text\"\n              value={search}\n              placeholder=\"Type search word\"\n              onChange={this.handleChange}\n            />\n\n            <select\n              name=\"query\"\n              value={query}\n              onChange={this.handleChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </form>\n\n          <ul className=\"TodoList__list\">\n            {this.applyFilters(todos).map(todo => (\n              <li\n                key={todo.id}\n                className={`TodoList__item TodoList__item--${\n                  todo.completed ? 'checked' : 'unchecked'}`}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    userId: PropTypes.number,\n  })).isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((result) => {\n    if (!result.ok) {\n      throw new Error(`${result.status} - ${result.statusText}`);\n    }\n\n    return result.json();\n  });\n","import { request } from './api';\n\nexport function getTodos() {\n  return request('/todos');\n}\n\nexport function getUserById(userId) {\n  return request(`/users/${userId}`);\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../helpers';\n\nexport class CurrentUser extends Component {\n    state={\n      user: {},\n    }\n\n    async componentDidMount() {\n      const response = await getUserById(this.props.userId);\n\n      this.setState({ user: response.data });\n    }\n\n    async componentDidUpdate(prevProps) {\n      if (this.props.userId !== prevProps.userId) {\n        const response = await getUserById(this.props.userId);\n        // eslint-disable-next-line\n            this.setState({ user: response.data });\n      }\n    }\n\n    render() {\n      const { userId, clearSelectedUser } = this.props;\n      const { user } = this.state;\n\n      return (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${userId}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            className=\"CurrentUser__clear\"\n            type=\"button\"\n            onClick={clearSelectedUser}\n          >\n            Clear\n          </button>\n        </div>\n      );\n    }\n}\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { getTodos } from './helpers';\nimport { CurrentUser } from './components/CurrentUser';\n\nexport class App extends Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const response = await getTodos();\n\n    this.setState({ todos: response.data });\n  }\n\n    selectUser = (userId) => {\n      this.setState({ selectedUserId: userId });\n    }\n\n    clearSelectedUser = () => {\n      this.setState({ selectedUserId: 0 });\n    }\n\n    render() {\n      const { todos, selectedUserId } = this.state;\n\n      return (\n        <div className=\"App\">\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              selectUser={this.selectUser}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearSelectedUser={this.clearSelectedUser}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      );\n    }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}